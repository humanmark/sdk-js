name: Publish to NPM

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'NPM tag (latest, beta, next)'
        required: true
        default: 'latest'
        type: choice
        options:
          - latest
          - beta
          - next
      dry-run:
        description: 'Dry run (skip actual publish)'
        required: false
        default: true
        type: boolean

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # For npm provenance
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for changelog generation if needed
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Run type checking
        run: npm run typecheck
      
      - name: Run tests
        run: npm test
      
      - name: Build the SDK
        run: npm run build
      
      - name: Check bundle size
        run: npm run build:check-size
      
      - name: Generate SRI hashes
        run: npm run build:sri
      
      - name: Update README with SRI hashes
        run: node scripts/update-readme-sri.js
      
      - name: Run security audit
        run: npm audit --audit-level=moderate
      
      - name: Verify build outputs
        run: |
          echo "Checking build outputs..."
          
          # Check that all expected files exist
          files=(
            "dist/esm/index.js"
            "dist/umd/index.js"
            "dist/browser/index.js"
            "dist/types/index.d.ts"
            "dist/sri-manifest.json"
          )
          
          for file in "${files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done
          
          # Check file sizes
          echo -e "\nFile sizes:"
          ls -lh dist/ dist/browser/
      
      - name: Get version from package.json
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "📦 Preparing to publish version: $VERSION"
      
      - name: Verify package.json
        run: |
          echo "Package info:"
          echo "Name: $(node -p "require('./package.json').name")"
          echo "Version: $(node -p "require('./package.json').version")"
          echo "License: $(node -p "require('./package.json').license")"
          
          # Verify required fields
          node -e "
            const pkg = require('./package.json');
            const required = ['name', 'version', 'description', 'main', 'module', 'types', 'files', 'repository', 'license'];
            const missing = required.filter(field => !pkg[field]);
            if (missing.length > 0) {
              console.error('❌ Missing required package.json fields:', missing.join(', '));
              process.exit(1);
            }
            console.log('✅ All required fields present');
          "
      
      - name: Pack the package
        run: |
          npm pack
          echo "📦 Package contents:"
          tar -tzf humanmark-sdk-js-*.tgz | head -20
          echo "..."
          echo "Total files: $(tar -tzf humanmark-sdk-js-*.tgz | wc -l)"
          
          # Verify package size
          PACKAGE_SIZE=$(stat -f%z humanmark-sdk-js-*.tgz 2>/dev/null || stat -c%s humanmark-sdk-js-*.tgz)
          PACKAGE_SIZE_MB=$(echo "scale=2; $PACKAGE_SIZE / 1048576" | bc)
          echo "Package size: ${PACKAGE_SIZE_MB}MB"
          
          # Warn if package is too large
          if (( $(echo "$PACKAGE_SIZE_MB > 10" | bc -l) )); then
            echo "⚠️ Warning: Package size is larger than 10MB"
          fi
      
      - name: Dry run publish
        if: inputs.dry-run == true
        run: |
          echo "🔍 Dry run mode - validating package only"
          npm publish --dry-run
          echo "✅ Dry run successful - package is ready to publish"
          echo ""
          echo "To publish for real, run this workflow again with dry-run set to false"
      
      - name: Publish to NPM
        if: inputs.dry-run == false
        run: |
          echo "🚀 Publishing to npm with tag: ${{ inputs.tag }}"
          npm publish --access public --tag ${{ inputs.tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}  # You must set NPM_ACCESS_TOKEN as a repository secret
      
      - name: Verify publication
        if: inputs.dry-run == false
        run: |
          sleep 10 # Give npm a moment to update
          
          # Check if package is available
          PKG_NAME=$(node -p "require('./package.json').name")
          
          if npm view "${PKG_NAME}@${VERSION}" > /dev/null 2>&1; then
            echo "✅ Package successfully published: ${PKG_NAME}@${VERSION}"
            echo ""
            echo "Package details:"
            npm view "${PKG_NAME}@${VERSION}"
          else
            echo "❌ Package not found on npm registry after publish"
            exit 1
          fi
      
      - name: Create summary
        run: |
          if [ "${{ inputs.dry-run }}" == "true" ]; then
            echo "## 🔍 Dry Run Summary" >> $GITHUB_STEP_SUMMARY
            echo "Package is ready to publish as version ${VERSION}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ Published to NPM" >> $GITHUB_STEP_SUMMARY
            echo "- **Package**: @humanmark/sdk-js" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: ${VERSION}" >> $GITHUB_STEP_SUMMARY
            echo "- **Tag**: ${{ inputs.tag }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Install with:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "npm install @humanmark/sdk-js@${VERSION}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi